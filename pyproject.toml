[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[dependency-groups]
dev = [
  "tox-uv>=1.22.1"
]

[project]
authors = [{name = "Joel Payne", email = "lilspazjoekp@gmail.com"}]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: BSD License",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Utilities"
]
dependencies = [
  "aiofiles",
  "aiohttp <4",
  "aiosqlite <=0.17.0",
  "asyncprawcore >=3.0.1, <4",
  "defusedxml ==0.7.1",
  "update_checker >=0.18"
]
dynamic = ["version", "description"]
keywords = ["reddit", "api", "wrapper", "asyncpraw", "praw", "async", "asynchronous"]
license = {file = "LICENSE.txt"}
maintainers = [{name = "Joel Payne", email = "lilspazjoekp@gmail.com"}]
name = "asyncpraw"
readme = "README.rst"
requires-python = "~=3.9"

[project.optional-dependencies]
dev = [
  "packaging",
  "asyncpraw[lint]",
  "asyncpraw[test]"
]
lint = [
  "asyncpraw[readthedocs]",
  "pre-commit",
  "ruff >=0.0.292"
]
readthedocs = [
  "furo",
  "sphinx",
  "sphinx-autodoc-typehints",
  "sphinxcontrib-trio"
]
test = [
  "pytest ==7.*",
  "pytest-asyncio ==0.18.*",
  "pytest-vcr ==1.*",
  "urllib3 ==1.*",
  "vcrpy ==4.2.1"
]

[project.urls]
"Change Log" = "https://asyncpraw.readthedocs.io/en/latest/package_info/change_log.html"
"Documentation" = "https://asyncpraw.readthedocs.io/"
"Issue Tracker" = "https://github.com/praw-dev/asyncpraw/issues"
"Source Code" = "https://github.com/praw-dev/asyncpraw"

[tool.docstrfmt]
extend_exclude = ['./docs/examples/']

[tool.hatch.version]
path = "asyncpraw/const.py"

[tool.pytest.ini_options]
asyncio_mode = "auto"
filterwarnings = "ignore::DeprecationWarning"
testpaths = "tests"

[tool.ruff]
include = [
  "asyncpraw/**.py"
]
line-length = 120
preview = true

[tool.ruff.lint]
ignore = [
  "ANN401", # any-type
  "D203", # incorrect-blank-line-before-class
  "D213", # multi-line-summary-second-line
  "E501", # Line too long
  "PLR0904", # Too many public methods
  "PLR0911", # Too many return statements
  "PLR0912", # Too many branches
  "PLR0913", # Too many arguments in function definition
  "PLR0915", # Too many statements
  "S101", # use of assert
  "SLF001" # Private member accessed
]
select = [
  "A", # flake8-builtins
  "ANN", # flake8-annotations
  "ASYNC", # flake8-async
  "ARG", # flake8-unused-arguments
  "B", # flake8-bugbear
  "BLE", # flake8-blind-except
  "C4", # flake8-comprehensions
  "D", # pydocstyle
  "DTZ", # flake8-datetimez
  "E", # pycodestyle
  "EM", # flake8-errmsg
  "ERA", # eradicate
  "EXE", # flake8-executable
  "F", # pyflakes
  "FA", # flake8-future-annotations
  "FBT", # flake8-boolean-trap
  "FIX", # flake8-fixme
  "FLY", # flynt
  "G", # flake8-logging-format
  "I", # isort
  "INP", # flake8-no-pep420
  "ISC", # flake8-implicit-str-concat
  "LOG", # flake8-logging
  "N", # pep8-naming
  "PIE", # flake8-pie
  "PGH", # pygrep-hooks
  "PL", # Pylint
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "Q", # flake8-quotes
  "RET", # flake8-return
  "RSE", # flake8-raise
  "RUF", # ruff-specific
  "S", # bandit
  "SIM", # flake8-simplify
  "SLF", # flake8-self
  "T10", # flake8-debugger
  "T20", # flake8-print
  "TCH", # flake8-type-checking
  "TD", # flake8-todos
  "TID", # flake8-tidy-imports
  "TRY", # tryceratops
  "UP", # pyupgrade
  "W" # pycodestyle
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["id"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"asyncpraw/models/mod_notes.py" = ["FA100"]
"asyncpraw/models/reddit/collections.py" = ["A005"]
"tests/*.py" = ["SLF001"]
